version: '3'
services:
  redis:
    container_name: sentry-redis
    image: redis
    restart: always
    networks:
      - backend
  postgres:
    container_name: sentry-postgres
    image: postgres
    environment:
      - POSTGRES_USER=sentry
      - POSTGRES_PASSWORD=changeit
    volumes:
      - ./postgresql:/var/lib/postgresql/data
    restart: always
    networks:
      - backend
  sentry-cron:
    container_name: sentry-cron
    image: sentry
    environment:
      - SENTRY_SECRET_KEY=changeit
      - SENTRY_EMAIL_HOST=changeit
      - SENTRY_EMAIL_PORT=587
      - SENTRY_EMAIL_USER=changeit
      - SENTRY_EMAIL_PASSWORD=changeit
      - SENTRY_SERVER_EMAIL=changeit
      - SENTRY_REDIS_HOST=redis
      - SENTRY_POSTGRES_HOST=postgres
      - SENTRY_DB_USER=sentry
      - SENTRY_DB_PASSWORD=changeit
    links:
      - redis
      - postgres
    command: sentry run cron
    restart: always
    networks:
      - backend
  sentry-worker:
    container_name: sentry-worker
    image: sentry
    environment:
      - SENTRY_SECRET_KEY=changeit
      - SENTRY_EMAIL_HOST=changeit
      - SENTRY_EMAIL_PORT=587
      - SENTRY_EMAIL_USER=changeit
      - SENTRY_EMAIL_PASSWORD=changeit
      - SENTRY_SERVER_EMAIL=changeit
      - SENTRY_REDIS_HOST=redis
      - SENTRY_POSTGRES_HOST=postgres
      - SENTRY_DB_USER=sentry
      - SENTRY_DB_PASSWORD=changeit
    links:
      - redis
      - postgres
    command: sentry run worker
    restart: always
    networks:
      - backend
  sentry:
    container_name: sentry
    image: sentry
    environment:
      - VIRTUAL_HOST=changeit
      - LETSENCRYPT_HOST=changeit
      - LETSENCRYPT_EMAIL=changeit
      - SENTRY_SECRET_KEY=changeit
      - SENTRY_EMAIL_HOST=changeit
      - SENTRY_EMAIL_PORT=587
      - SENTRY_EMAIL_USER=changeit
      - SENTRY_EMAIL_PASSWORD=changeit
      - SENTRY_SERVER_EMAIL=changeit
      - SENTRY_REDIS_HOST=redis
      - SENTRY_POSTGRES_HOST=postgres
      - SENTRY_DB_USER=sentry
      - SENTRY_DB_PASSWORD=changeit
    links:
      - redis
      - postgres
    labels:
      - networks=bridge
    networks:
      - backend
    restart: always
  connect-bridge:
    image: stmllr/docker-client
    networks:
      - backend
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
       - sentry
    command: /bin/sh -c 'docker ps -f label=networks=bridge --format "{{.ID}}" | xargs docker network connect bridge'
networks:
  backend:
